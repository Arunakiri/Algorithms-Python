# Given weights and profits of n items, we need to put these items in a knapsack of "target" capacity to get the maximum profit.
# In the 0-1 Knapsack problem, we are not allowed to break items. We either take the whole item or don’t take it.
# In Fractional Knapsack, we can break items for maximizing the total value of knapsack.
# An efficient solution is to use Greedy approach. 
# Calculate the "profit/weight" ratio for each item and sort(highest first) the item on basis of this ratio. 
# Then take the item with the highest ratio and add them until we can’t add the next item as a whole and 
# add the next item as much as we can.


target = 15
a = '1 3 5 4 1 3 2'
b = '5 10 15 7 8 9 4'

weights = list(map(int, a.split()))
profits = list(map(int, b.split()))

n = len(weights)

pw_ratio = []

for i in range(n):
    pw_ratio.append([round(profits[i]/weights[i], 2), weights[i], profits[i]])

l = sorted(pw_ratio, reverse=True)

max_profit = 0

for each in l:
    if each[1] <= target:
        max_profit += each[2]
        target -= each[1]
    else:
        max_profit += target*each[0]
        break

print(max_profit)
